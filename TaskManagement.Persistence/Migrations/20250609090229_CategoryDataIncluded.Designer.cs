// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagement.DataAccess;

#nullable disable

namespace TaskManagement.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250609090229_CategoryDataIncluded")]
    partial class CategoryDataIncluded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("MainLevel")
                        .HasColumnType("integer")
                        .HasColumnName("main_level");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EXPValue")
                        .HasColumnType("integer")
                        .HasColumnName("exp_value");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_archives");

                    b.ToTable("archives", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.CategoryLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<int>("CurrentEXP")
                        .HasColumnType("integer")
                        .HasColumnName("current_exp");

                    b.Property<int>("EXPToNextLevel")
                        .HasColumnType("integer")
                        .HasColumnName("exp_to_next_level");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("NeededEXP")
                        .HasColumnType("integer")
                        .HasColumnName("needed_exp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_category_levels");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_category_levels_user_id");

                    b.ToTable("category_levels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 2,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = 3,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = 0,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("EXPValue")
                        .HasColumnType("integer")
                        .HasColumnName("exp_value");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tasks_user_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int>("EXP_Gained")
                        .HasColumnType("integer")
                        .HasColumnName("exp_gained");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_task_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_task_logs_user_id");

                    b.ToTable("task_logs", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.CategoryLevel", b =>
                {
                    b.HasOne("TaskManagement.Entities.AppUser", "User")
                        .WithMany("CategoryLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_levels_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskManagement.Entities.AppUser", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskLog", b =>
                {
                    b.HasOne("TaskManagement.Entities.AppUser", "User")
                        .WithMany("TaskLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.AppUser", b =>
                {
                    b.Navigation("CategoryLevels");

                    b.Navigation("TaskLogs");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
