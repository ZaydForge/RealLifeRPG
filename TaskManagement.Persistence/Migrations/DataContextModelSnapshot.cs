// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagement.DataAccess;

#nullable disable

namespace TaskManagement.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Domain.Entities.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UnlockRule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unlock_rule");

                    b.HasKey("Id")
                        .HasName("pk_achievements");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_group_id");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("PermissionGroupId")
                        .HasDatabaseName("ix_permissions_permission_group_id");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission_groups");

                    b.ToTable("permission_groups", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UnlockRule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unlock_rule");

                    b.HasKey("Id")
                        .HasName("pk_titles");

                    b.ToTable("titles", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("RolePermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("role_permission_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("RolePermissionId")
                        .HasDatabaseName("ix_users_role_permission_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "superadmin@example.com",
                            Fullname = "Adminjon",
                            IsVerified = true,
                            PasswordHash = "D42P7vktaO2foK9yXdm141IJE8Z8z3auswXfDhyzKCM=",
                            PhoneNumber = "+998901234567",
                            ProfileId = 1,
                            Salt = "9f7d6dc5-34b4-4b66-a65e-0dc2fc17c0db",
                            UpdatedAt = new DateTime(2025, 7, 24, 17, 25, 57, 289, DateTimeKind.Utc).AddTicks(3458),
                            Username = "superadmin"
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unlocked_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_achievements");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_user_achievements_achievement_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_achievements_user_id");

                    b.ToTable("user_achievements", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserOTPs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserOTPsId")
                        .HasColumnType("integer")
                        .HasColumnName("user_ot_ps_id");

                    b.HasKey("Id")
                        .HasName("pk_user_ot_ps");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_ot_ps_user_id");

                    b.HasIndex("UserOTPsId")
                        .HasDatabaseName("ix_user_ot_ps_user_ot_ps_id");

                    b.ToTable("user_ot_ps", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer")
                        .HasColumnName("title_id");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unlocked_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_titles");

                    b.HasIndex("TitleId")
                        .HasDatabaseName("ix_user_titles_title_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_titles_user_id");

                    b.ToTable("user_titles", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EXPValue")
                        .HasColumnType("integer")
                        .HasColumnName("exp_value");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_archives");

                    b.ToTable("archives", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.CategoryLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<int>("CurrentEXP")
                        .HasColumnType("integer")
                        .HasColumnName("current_exp");

                    b.Property<int>("EXPToNextLevel")
                        .HasColumnType("integer")
                        .HasColumnName("exp_to_next_level");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("NeededEXP")
                        .HasColumnType("integer")
                        .HasColumnName("needed_exp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_category_levels");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_category_levels_user_id");

                    b.ToTable("category_levels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 2,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = 3,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = 0,
                            CurrentEXP = 0,
                            EXPToNextLevel = 100,
                            Level = 1,
                            NeededEXP = 100,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("EXPValue")
                        .HasColumnType("integer")
                        .HasColumnName("exp_value");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tasks_user_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int>("EXP_Gained")
                        .HasColumnType("integer")
                        .HasColumnName("exp_gained");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_task_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_task_logs_user_id");

                    b.ToTable("task_logs", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_streak");

                    b.Property<string>("CurrentTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_title");

                    b.Property<DateTime>("LastLevelUp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_level_up");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("integer")
                        .HasColumnName("longest_streak");

                    b.Property<int>("MainLevel")
                        .HasColumnType("integer")
                        .HasColumnName("main_level");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("TotalExp")
                        .HasColumnType("integer")
                        .HasColumnName("total_exp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_user_id");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Persistence, consistency and gratitude - key to success",
                            CreatedDate = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStreak = 0,
                            CurrentTitle = "The Beginning",
                            LastLevelUp = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            LongestStreak = 0,
                            MainLevel = 1,
                            ProfilePictureUrl = "https://example.com/profile.jpg",
                            TotalExp = 0,
                            UserId = 1,
                            Username = "Zayd"
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Permission", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_permission_groups_permission_group_id");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("TaskManagement.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.RolePermission", null)
                        .WithMany("Users")
                        .HasForeignKey("RolePermissionId")
                        .HasConstraintName("fk_users_role_permissions_role_permission_id");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserAchievement", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_achievements_achievements_achievement_id");

                    b.HasOne("TaskManagement.Entities.UserProfile", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_achievements_user_profiles_user_id");

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserOTPs", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_ot_ps_users_user_id");

                    b.HasOne("TaskManagement.Domain.Entities.UserOTPs", null)
                        .WithMany("OtpCodes")
                        .HasForeignKey("UserOTPsId")
                        .HasConstraintName("fk_user_ot_ps_user_ot_ps_user_ot_ps_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("TaskManagement.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserTitle", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_titles_titles_title_id");

                    b.HasOne("TaskManagement.Entities.UserProfile", "User")
                        .WithMany("Titles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_titles_user_profiles_user_id");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.CategoryLevel", b =>
                {
                    b.HasOne("TaskManagement.Entities.UserProfile", "User")
                        .WithMany("CategoryLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_levels_user_profiles_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskManagement.Entities.UserProfile", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_user_profiles_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.TaskLog", b =>
                {
                    b.HasOne("TaskManagement.Entities.UserProfile", "User")
                        .WithMany("TaskLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_logs_user_profiles_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Entities.UserProfile", b =>
                {
                    b.HasOne("TaskManagement.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("TaskManagement.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.RolePermission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.UserOTPs", b =>
                {
                    b.Navigation("OtpCodes");
                });

            modelBuilder.Entity("TaskManagement.Entities.UserProfile", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("CategoryLevels");

                    b.Navigation("TaskLogs");

                    b.Navigation("Tasks");

                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
